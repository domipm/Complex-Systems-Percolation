''' 

    CODE USED TO GRAPH THE LATTICE AND THE SORTED LATTICE
    INPUTS: "lattice.txt" -> Text file containing parameters of all nodes (generated by "lattice_generator.cpp")
            "lattice_sorted.txt" -> Text file with the already-sorted nodes (generated by "hoshen-kopelman.cpp")
    OUTPUTS: Both graphs "lattice.png" and "lattice_sorted.png"

'''

import numpy as np
import matplotlib.pyplot as plt

show_circles = False
show_index = False
show_graph = False

# READ FILES

data_init = np.loadtxt("lattice.txt", skiprows=2)
data = np.loadtxt("lattice_sorted.txt", skiprows=3)

# Neighbor distance parameter D (get from Hoshen-Kopelman algorithm)
D = 1.25

# PLOT INITIAL STATE

fig, ax = plt.subplots()
ax.set_aspect(1)

x = data_init[:,1] # X position
y = data_init[:,2] # Y position
s = data_init[:,3] # Status (active/inactive)
c = data_init[:,4] # cluster_index

ax.set_xlim( (min(x)-0.5, max(x)+0.5) )
ax.set_ylim( (min(y)-0.5, max(y)+0.5) )

# Plot all points
ax.scatter(x,y,color="orangered")
# Plot inactive nodes as black points
for i in range(len(x)):
    if (s[i] == 0):
        ax.scatter(x[i],y[i],color="black")
    if (s[i] == 1 and show_circles == True):
        #ax.scatter(x[i],y[i],color="red")
        ax.add_artist( plt.Circle( (x[i], y[i]), D, fill=False, color="black", alpha=0.15 ) )

if show_index == True:
    n = []
    for i in range(len(x)):
        n = np.append(n, str(i))
    for i,n in enumerate(n):
        ax.annotate(n,(x[i],y[i]),size=6, xytext = (x[i]+0.1,y[i]+0.1))

plt.tight_layout()

plt.savefig("lattice.png", dpi=300, bbox_inches='tight')
if (show_graph): plt.show()
plt.close()

# PLOT FINAL STATE

x = data[:,1] # X position
y = data[:,2] # Y position
s = data[:,3] # Status (active/inactive)
c = data[:,4] # cluster_index

fig, ax = plt.subplots()
ax.set_aspect(1)

ax.set_xlim( (min(x)-0.5, max(x)+0.5) )
ax.set_ylim( (min(y)-0.5, max(y)+0.5) )

# Plot all points
ax.scatter(x,y,c=c,cmap="rainbow")
# Plot inactive nodes as black points
for i in range(len(x)):
    if (s[i] == 0):
        ax.scatter(x[i],y[i],color="white",s=45) # White s=45 for invisible inactive
    if (s[i] == 1 and show_circles == True):
        #ax.scatter(x[i],y[i],color="red")
        ax.add_artist( plt.Circle( (x[i], y[i]), D, fill=False, color="black", alpha=0.15 ) )

if show_index == True:
    n = []
    for i in range(len(x)):
        n = np.append(n, str(i))
    for i,n in enumerate(n):
        ax.annotate(n,(x[i],y[i]),size=6, xytext = (x[i]+0.1,y[i]+0.1))

plt.tight_layout()

plt.savefig("lattice_sorted.png", dpi=300, bbox_inches='tight')
if (show_graph): plt.show()
plt.close()